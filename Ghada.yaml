# // const http = require("http");
# // const server = http.createServer((req, res) => {
# //   if (req.method === "GET" && req.url === "/") {
# //     res.write("Home page");
# //     res.end();
# //   } else if (req.method === "get" && req.url === "/about") {
# //     res.write("About page");
# //     res.end();
# //   }
# // });
# // server.listen(3000, (error) => {
# //   console.log("Failed to listen");
# // });
openapi: 3.0.0
info:
  version: 1.0.0
  title: Arco E-commerce Website
  description: API for Glow platform - skin care products 
  contact:
    email: 1nourahalmanea@gmail.com
servers:
  - url: http://localhost:3001
tags:
  - name: products
    description: Everything about products
  - name: users
    description:  Everything about Users
  - name: orders
    description:  Everything about orders
  - name: categories
    description:  Everything about categories  
components:
  schemas:
    User:
      type: object
      required:
        - lastName
        - firstName
        - password
        - email
      properties:
        id:
          type: number
          example: 1
        firstName:
          type: string
          example: Norah
        lastName:
          type: string
          example: AlManeea
        email:
          type: string
          example: 1nourahalmanea@gmail.com
        password:
          type: string
          example: 1234      
    Product:
     type: object
     required:
       - name
       - category
       - description
       - price
       - image
     properties:
       id:
         type: number
         example: 1
       name:
         type: string
         example: Serum
       price:
         type: number
         example: 390
       description:  
         type: string
         example: serum description
       category:
         $ref: '#/components/schemas/Category'
       image:
        type: string
        example: img_url
    Order:
     type: object
     properties:
      id:
        type: number
        example: 1
      total:
       type: number
       example: 495
      orderItems:
        type: array
        items:
        $ref: '#/components/schemas/Product'
    Category:
        type: object
        properties:
          id:
           type: number
          name:
           type: string

paths:
# Products 
  /products:
    get:
      tags:
        - products
      summary: Get list of products
      parameters:
        - in: query
          name: page
          schema:
            type: number
          required: false
        - in: query
          name: limit
          schema:
            type: number
          required: false 
        - in: query
          name: sortBy
          schema:
            type: number
            enum: 
             - 'lowest price'
             - 'highest price'
          required: false    
      responses:
        200:
          description: Return all products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        500:
          description: Server error
  /products/{productId}:
    post:
      tags:
        - products
      summary: Create a product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        201:
          description: Single product is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        500:
          description: Server error

    get:
      tags:
        - products
      summary: Get a single product
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Single product is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        500:
          description: Server error
    put:
      tags:
        - products
      summary: Update a single product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Update a single product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        500:
          description: Server error
    delete:
      tags:
        - products
      summary: Delete a single product
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Delete a single product
        404:
           description: Product not found
        500:
          description: Server error
  /products/search:
    get:
      tags:
        - products
      summary: Search products
      parameters:
        - in: query
          name: search
          required: true
          schema:
            type: string
      responses:
        200:
          description: All the products are returned based on the search value
          content:
            application/json:
              schema:
                type: array
                items:
                  description: All the products are returned based on the search value
                  $ref: '#/components/schemas/Product'
        404:
           description: Product not found          
        500:
          description: Server error
        
# Users
  /users:
   get:
      tags:
        - users
      summary: Get list of users
      description: description
      responses:
        200:
          description: Return all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'    
        500:
          description: Server error
  /users/{userId}:
    post:
      tags:
        - users
      summary: create a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Single user is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: Server error
    get:
      tags:
        - users
      summary:  get single user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Single user is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
           description: User not found        
        500:
          description: Server error
    put:
      tags:
        - users
      summary: Update a single user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Update a single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: Server error
    delete:
      tags:
        - users
      summary: Delete a single user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Delete a single user
        404:
           description: User not found  
        500:
          description: Server error
  /users/login:
    post:
      tags:
        - users
      summary: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: User authinticated
        401:
          description: User un-authorized
        500:
          description: Server error     
  /users/logout:
    post:
      tags:
        - users
      summary: logout
      responses:
        200:
          description: User logged out
        500:
          description: Server error            
              
# Categories
  /categories:
   get:
      tags:
        - categories
      summary: Get list of categories
      description: description
      responses:
        200:
          description: Return all categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'    
        500:
          description: Server error
  /categories/{categoryId}:
    post:
      tags:
        - categories
      summary: create a category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        201:
          description: Single category is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        500:
          description: Server error
    get:
      tags:
        - categories
      summary:  get single category
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Single category is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        404:
           description: Category not found        
        500:
          description: Server error
    put:
      tags:
        - categories
      summary: Update a single category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Update a single category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        500:
          description: Server error
    delete:
      tags:
        - categories
      summary: Delete a single category
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Delete a single category
        404:
           description: category not found  
        500:
          description: Server error
                  
# Orders
  /orders:
   get:
      tags:
        - orders
      summary: Get list of orders
      description: description
      responses:
        200:
          description: Return all orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'    
        500:
          description: Server error
  /orders/{orderId}:
    post:
      tags:
        - orders
      summary: create an order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        201:
          description: Single order is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        500:
          description: Server error
    get:
      tags:
        - orders
      summary:  get single order
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Single order is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        404:
           description: Order not found        
        500:
          description: Server error
    put:
      tags:
        - orders
      summary: Update a single order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Update a single order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        500:
          description: Server error
    delete:
      tags:
        - orders
      summary: Delete a single order
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Delete a single order
        404:
           description: order not found  
        500:
          description: Server error
